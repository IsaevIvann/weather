import re
import requests
import asyncio
from bs4 import BeautifulSoup
from pytz import timezone
from telegram import Bot, Update, ReplyKeyboardMarkup
from telegram.ext import Application, MessageHandler, ContextTypes, CommandHandler, filters
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta


BOT_TOKEN = '7044099465:AAEKAmQZ5B-JFNLZgA5Ze661m6_FzQCpa4Y'
USER_CHAT_IDS = ['457829882','191742166']
HORO_SOURCE = "dzen"  # –≤–∞—Ä–∏–∞–Ω—Ç—ã: "dzen" | "mail" | "dzen_turbo"

bot = Bot(token=BOT_TOKEN)

CONDITIONS = {
    "—è—Å–Ω–æ": "–Ω—É, —Ç—É—Ç –≤–∞—â–µ –≤—Å—ë —è—Å–Ω–æ, –º–∞–ª–∞—è –º–æ–∂–µ—Ç —Å–∏—è—Ç—å ‚òÄÔ∏èü§ô",
    "–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ": "—á—É—á—É—Ç–∫–∞ –æ–±–ª–∞—á–Ω–æ ü§èüå§",
    "–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏": "—á—É—á—É—Ç–∫–∞ –æ–±–ª–∞—á–Ω–æ + –¥—ç—à–∫–∞ —Å–æ–ª–Ω—Ü–∞ ü§è+ üå§",
    "–æ–±–ª–∞—á–Ω–æ": "—Ç–∞–∫ —Å–µ–±–µ, –æ–±–ª–∞—á–Ω–æ üò∂‚Äçüå´",
    "–ø–∞—Å–º—É—Ä–Ω–æ": "–Ω—É —Ç–∞–∫–æ–µ, –ø–∞—Å–º—É—Ä–Ω–æ–µ üí©",
    "–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å": "—á—É—Ç—å-—á—É—Ç—å –¥–æ—â—å üòìüå¶",
    "–¥–æ–∂–¥—å": "–¥–æ—â—å üòì üåß",
    "—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å": "—Ç–æ–≥–æ –≤—Å—ë –∫–∞–∫–æ–π –¥–æ—â—å üåß",
    "—Å–Ω–µ–≥": "—Å–Ω–µ–≥ ‚ùÑÔ∏èü•∂",
    "–≥—Ä–æ–∑–∞": "–≥—Ä–æ–∑–∞ –≥—Ä–æ–∑–∏–ª–∞, —è —É—Ö–æ–¥–∏–ª–∞ ‚ö°Ô∏è",
}

RU_PARTS = {'morning': '–£—Ç—Ä–æ–º', 'day': '–î–Ω—ë–º', 'evening': '–í–µ—á–µ—Ä–æ–º'}
ICONS = {'morning': 'üåÖ', 'day': 'üèôÔ∏è ', 'evening': 'üåô'}


def fetch_forecast_from_html(days_ahead: int = 1) -> str:
    url = "https://yandex.ru/pogoda/moscow/details"
    headers = {"User-Agent": "Mozilla/5.0", "Accept-Language": "ru-RU,ru;q=0.9"}
    response = requests.get(url, headers=headers, timeout=10)
    soup = BeautifulSoup(response.text, "html.parser")

    months_ru = ["", "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
                 "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"]
    target_date = datetime.now() + timedelta(days=days_ahead)
    day = target_date.day
    month = months_ru[target_date.month]
    date_pattern = re.compile(rf'\b{day}\s+{month}\b', re.IGNORECASE)

    target_article = None
    for article in soup.select("article[data-day]"):
        heading = article.find("h3")
        if heading and date_pattern.search(heading.text):
            target_article = article
            break

    if not target_article:
        raise Exception(f"–ù–µ –Ω–∞–π–¥–µ–Ω –±–ª–æ–∫ <article> —Å –¥–∞—Ç–æ–π '{day} {month}'")

    date_str = f"{day} {month}".capitalize()
    mapping = {'m': 'morning', 'd': 'day', 'e': 'evening'}
    result = []

    for prefix, key in mapping.items():
        part = target_article.select_one(f'[style="grid-area:{prefix}-part"]')
        temp = target_article.select_one(f'[style="grid-area:{prefix}-temp"]')
        text = target_article.select_one(f'[style="grid-area:{prefix}-text"]')
        feels = target_article.select_one(f'[style="grid-area:{prefix}-feels"]')
        if not (part and temp and text and feels):
            continue
        emoji = ICONS.get(key, '‚ùì')
        cond = CONDITIONS.get(text.text.strip().lower(), text.text.strip().lower())
        result.append(
            f"{emoji} {RU_PARTS[key]}: {temp.text.strip()} (–ø–æ –æ—â—É—â–µ–Ω–∏—è–º {feels.text.strip()}), {cond}"
        )

    return f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {date_str} üîÆ:\n\n" + "\n\n".join(result)


def fetch_horoscope_today(sign_slug: str = "scorpio") -> str:
    """–ë—ç–∫–∞–ø-–∏—Å—Ç–æ—á–Ω–∏–∫: horo.mail.ru (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤)."""
    url = f"https://horo.mail.ru/prediction/{sign_slug}/today/"
    headers = {"User-Agent": "Mozilla/5.0", "Accept-Language": "ru-RU,ru;q=0.9"}
    r = requests.get(url, headers=headers, timeout=15)
    r.raise_for_status()
    soup = BeautifulSoup(r.text, "html.parser")

    containers = [
        soup.select_one('[itemprop="articleBody"]'),
        soup.select_one('.article__item_html'),
        soup.select_one('.article__text'),
        soup.select_one('[class*="article__text"]'),
    ]

    text_parts: list[str] = []
    for c in containers:
        if not c:
            continue
        for p in c.select('p'):
            t = p.get_text(" ", strip=True)
            if not t:
                continue
            if any(bad in t.lower() for bad in ["—á–∏—Ç–∞–π—Ç–µ —Ç–∞–∫–∂–µ", "–ø–æ–¥–µ–ª–∏—Ç—å—Å—è", "—Ä–µ–∫–ª–∞–º–∞", "mail.ru"]):
                continue
            text_parts.append(t)
        if text_parts:
            break

    if not text_parts:
        og = soup.select_one('meta[property="og:description"]')
        if og and og.get("content"):
            return og["content"].strip()
        desc = soup.select_one('meta[name="description"]')
        if desc and desc.get("content"):
            return desc["content"].strip()
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üòï"

    return re.sub(r'\s{2,}', ' ', " ".join(text_parts)).strip()


def fetch_horoscope_dzen_turbo(day: str = "today") -> str:
    """–§–æ–ª–±—ç–∫: Turbo-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –î–∑–µ–Ω–∞ (–±–µ–∑ JS)."""
    suf = "na-segodnya" if day == "today" else "na-zavtra"
    url = f"https://dzen.ru/media-turbo/topic/horoscope-skorpion-{suf}"
    headers = {
        "User-Agent": "Mozilla/5.0",
        "Accept-Language": "ru-RU,ru;q=0.9",
        "Cache-Control": "no-cache",
        "Pragma": "no-cache",
    }
    r = requests.get(url, headers=headers, timeout=15)
    r.raise_for_status()
    soup = BeautifulSoup(r.text, "html.parser")

    containers = [
        soup.select_one('[itemprop="articleBody"]'),
        soup.select_one('article'),
        soup.select_one('div[role="article"]'),
        soup.select_one('section article'),
        soup.select_one('main'),
        soup
    ]

    parts: list[str] = []
    for c in containers:
        if not c:
            continue
        for p in c.select('p'):
            t = p.get_text(" ", strip=True)
            if not t:
                continue
            low = t.lower()
            if any(bad in low for bad in ["—á–∏—Ç–∞–π—Ç–µ —Ç–∞–∫–∂–µ", "–ø–æ–¥–µ–ª–∏—Ç—å—Å—è", "—Ä–µ–∫–ª–∞–º–∞", "—è–Ω–¥–µ–∫—Å –¥–∑–µ–Ω"]):
                continue
            parts.append(t)
        if parts:
            break

    if not parts:
        for sel in ('meta[property="og:description"]', 'meta[name="description"]'):
            m = soup.select_one(sel)
            if m and m.get("content"):
                return m["content"].strip()
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üòï"

    return re.sub(r"\s{2,}", " ", " ".join(parts)).strip()


def fetch_horoscope_dzen(day: str = "today") -> str:
    """
    –ü–∞—Ä—Å–∏–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –î–∑–µ–Ω–∞ (–±–µ–∑ JS-—Ä–µ–Ω–¥–µ—Ä–∞).
    URL: https://dzen.ru/topic/horoscope-skorpion
    –í–∫–ª–∞–¥–∫–∏ '–°–µ–≥–æ–¥–Ω—è' –∏ '–ó–∞–≤—Ç—Ä–∞' ‚Äî —ç—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–Ω—É—Ç—Ä–∏ –≤–∏–¥–∂–µ—Ç–∞.
    """
    url = "https://dzen.ru/topic/horoscope-skorpion"
    headers = {
        "User-Agent": "Mozilla/5.0",
        "Accept-Language": "ru-RU,ru;q=0.9",
        "Cache-Control": "no-cache",
        "Pragma": "no-cache",
    }
    r = requests.get(url, headers=headers, timeout=15)
    r.raise_for_status()
    soup = BeautifulSoup(r.text, "html.parser")

    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–∞–º –≤–∏–¥–∂–µ—Ç
    widget = soup.select_one('[data-testid="horoscope_widget"]') or soup
    # –í–Ω—É—Ç—Ä–∏ –≤–∏–¥–∂–µ—Ç–∞ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ "item"-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (–°–µ–≥–æ–¥–Ω—è, –ó–∞–≤—Ç—Ä–∞, ...).
    # –ö–ª–∞—Å—Å—ã –≤–∏–¥–∞ topic-channel--horoscope-widget__itemUt-***
    items = widget.select('div[class*="horoscope-widget__itemUt"]')

    # –ò–Ω–¥–µ–∫—Å—ã: 0 ‚Äî –°–µ–≥–æ–¥–Ω—è, 1 ‚Äî –ó–∞–≤—Ç—Ä–∞
    idx = 0 if day == "today" else 1
    text_parts: list[str] = []

    if items and len(items) > idx:
        item = items[idx]
        # –¢–µ–∫—Å—Ç—ã –ª–µ–∂–∞—Ç –≤ –±–ª–æ–∫–∞—Ö ...__itemText-***
        texts = item.select('div[class*="horoscope-widget__itemText"]')
        if not texts:
            # –§–æ–ª–±—ç–∫ ‚Äî –ª—é–±—ã–µ <p> –≤–Ω—É—Ç—Ä–∏ item
            texts = item.select('p')

        for t in texts:
            s = t.get_text(" ", strip=True)
            if not s:
                continue
            low = s.lower()
            if any(bad in low for bad in ["—á–∏—Ç–∞–π—Ç–µ —Ç–∞–∫–∂–µ", "–ø–æ–¥–µ–ª–∏—Ç—å—Å—è", "—Ä–µ–∫–ª–∞–º–∞", "—è–Ω–¥–µ–∫—Å –¥–∑–µ–Ω"]):
                continue
            text_parts.append(s)

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –±–∞–∑–æ–≤–æ–π –≤–µ—Ä—Å—Ç–∫–µ ‚Äî –ø—Ä–æ–±—É–µ–º Turbo –∫–∞–∫ –±—ç–∫–∞–ø:
    if not text_parts:
        return fetch_horoscope_dzen_turbo(day=day)

    return re.sub(r'\s{2,}', ' ', " ".join(text_parts)).strip()


async def send_tomorrow_weather(bot_instance: Bot = None, chat_ids: list[str] = None):
    try:
        forecast = fetch_forecast_from_html(days_ahead=1)
        for chat_id in (chat_ids or USER_CHAT_IDS):
            await (bot_instance or bot).send_message(chat_id=chat_id, text=forecast)
    except Exception as e:
        for chat_id in (chat_ids or USER_CHAT_IDS):
            await (bot_instance or bot).send_message(chat_id=chat_id, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: {e}")


async def send_today_weather(bot_instance: Bot = None, chat_ids: list[str] = None, include_horoscope: bool = False):
    try:
        forecast = fetch_forecast_from_html(days_ahead=0)
        if include_horoscope:
            try:
                if HORO_SOURCE == "dzen":
                    horoscope = fetch_horoscope_dzen(day="today")
                elif HORO_SOURCE == "dzen_turbo":
                    horoscope = fetch_horoscope_dzen_turbo(day="today")
                else:
                    horoscope = fetch_horoscope_today(sign_slug="scorpio")
                forecast = f"{forecast}\n\nüîÆ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n{horoscope}"
            except Exception as he:
                forecast = f"{forecast}\n\nüîÆ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ({he})"

        for chat_id in (chat_ids or USER_CHAT_IDS):
            await (bot_instance or bot).send_message(chat_id=chat_id, text=forecast)
    except Exception as e:
        for chat_id in (chat_ids or USER_CHAT_IDS):
            await (bot_instance or bot).send_message(chat_id=chat_id, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {e}")


async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üå§ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞":
        await send_tomorrow_weather(chat_ids=[update.effective_chat.id])
    elif update.message.text == "üåû –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è":
        # –ø—Ä–∏—Å—ã–ª–∞–µ–º –ø–æ–≥–æ–¥—É + –≥–æ—Ä–æ—Å–∫–æ–ø
        await send_today_weather(chat_ids=[update.effective_chat.id], include_horoscope=True)


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [["üåû –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", "üå§ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"]]
    markup = ReplyKeyboardMarkup(kb, resize_keyboard=True)
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–∫–∞–∂—É —Ç–µ–±–µ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã.", reply_markup=markup)


async def start_bot():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(MessageHandler(filters.TEXT, handle_button))

    loop = asyncio.get_running_loop()
    scheduler = AsyncIOScheduler(timezone=timezone("Europe/Moscow"))

    scheduler.add_job(
        lambda: asyncio.run_coroutine_threadsafe(send_today_weather(app.bot, include_horoscope=True), loop),
        trigger='cron',
        hour=7,
        minute=00
    )
    scheduler.add_job(
        lambda: asyncio.run_coroutine_threadsafe(send_tomorrow_weather(app.bot), loop),
        trigger='cron',
        hour=22,
        minute=30
    )

    scheduler.start()
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await app.run_polling()


if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()

    loop = asyncio.get_event_loop()
    loop.create_task(start_bot())
    loop.run_forever()
