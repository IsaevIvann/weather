import re
import requests
import asyncio
from bs4 import BeautifulSoup
from pytz import timezone
from telegram import Bot, Update, ReplyKeyboardMarkup
from telegram.ext import Application, MessageHandler, ContextTypes, CommandHandler, filters
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta


BOT_TOKEN = '7044099465:AAEKAmQZ5B-JFNLZgA5Ze661m6_FzQCpa4Y'
USER_CHAT_IDS = ['457829882','191742166']

bot = Bot(token=BOT_TOKEN)

CONDITIONS = {
    "—è—Å–Ω–æ": "–Ω—É, —Ç—É—Ç –≤–∞—â–µ –≤—Å—ë —è—Å–Ω–æ, –º–∞–ª–∞—è –º–æ–∂–µ—Ç —Å–∏—è—Ç—å ‚òÄÔ∏èü§ô",
    "–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ": "—á—É—á—É—Ç–∫–∞ –æ–±–ª–∞—á–Ω–æ ü§èüå§",
    "–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏": "—á—É—á—É—Ç–∫–∞ –æ–±–ª–∞—á–Ω–æ + –¥—ç—à–∫–∞ —Å–æ–ª–Ω—Ü–∞ ü§è+ üå§",
    "–æ–±–ª–∞—á–Ω–æ": "—Ç–∞–∫ —Å–µ–±–µ, –æ–±–ª–∞—á–Ω–æ üò∂‚Äçüå´",
    "–ø–∞—Å–º—É—Ä–Ω–æ": "–Ω—É —Ç–∞–∫–æ–µ, –ø–∞—Å–º—É—Ä–Ω–æ–µ üí©",
    "–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å": "—á—É—Ç—å-—á—É—Ç—å –¥–æ—â—å üòìüå¶",
    "–¥–æ–∂–¥—å": "–¥–æ—â—å üòì üåß",
    "—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å": "—Ç–æ–≥–æ –≤—Å—ë –∫–∞–∫–æ–π –¥–æ—â—å üåß",
    "—Å–Ω–µ–≥": "—Å–Ω–µ–≥ ‚ùÑÔ∏èü•∂",
    "–≥—Ä–æ–∑–∞": "–≥—Ä–æ–∑–∞ –≥—Ä–æ–∑–∏–ª–∞, —è —É—Ö–æ–¥–∏–ª–∞ ‚ö°Ô∏è",
}

RU_PARTS = {'morning': '–£—Ç—Ä–æ–º', 'day': '–î–Ω—ë–º', 'evening': '–í–µ—á–µ—Ä–æ–º'}
ICONS = {'morning': 'üåÖ', 'day': 'üèôÔ∏è ', 'evening': 'üåô'}


def fetch_forecast_from_html(days_ahead: int = 1) -> str:
    url = "https://yandex.ru/pogoda/moscow/details"
    headers = {
        "User-Agent": "Mozilla/5.0",
        "Accept-Language": "ru-RU,ru;q=0.9",
        "Cache-Control": "no-cache",
        "Pragma": "no-cache",
    }

    # 1) ¬´–°–µ–≥–æ–¥–Ω—è¬ª –≤ –ú–æ—Å–∫–≤–µ, –∞ –Ω–µ –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É —Å–µ—Ä–≤–µ—Ä–∞
    mz = timezone("Europe/Moscow")
    target_dt = datetime.now(mz).date() + timedelta(days=days_ahead)
    iso = target_dt.strftime("%Y-%m-%d")

    resp = requests.get(url, headers=headers, timeout=15)
    resp.raise_for_status()
    soup = BeautifulSoup(resp.text, "html.parser")

    # 2) –°–Ω–∞—á–∞–ª–∞ ‚Äî —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ data-day
    target_article = soup.select_one(f'article[data-day="{iso}"]')

    # 3) –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø–æ–¥–±–∏—Ä–∞–µ–º –±–ª–∏–∂–∞–π—à—É—é –ø–æ –¥–∞—Ç–µ –∏–∑ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
    if not target_article:
        closest = None
        best_delta = None
        for art in soup.select("article[data-day]"):
            try:
                d = datetime.strptime(art.get("data-day"), "%Y-%m-%d").date()
            except Exception:
                continue
            delta = abs((d - target_dt).days)
            if best_delta is None or delta < best_delta:
                closest, best_delta = art, delta
        target_article = closest

    # 4) –ï—Å–ª–∏ –∏ —Ç—É—Ç –ø—É—Å—Ç–æ ‚Äî –±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–æ–±—ã—á–Ω–æ —ç—Ç–æ —Å–µ–≥–æ–¥–Ω—è)
    if not target_article:
        arts = soup.select("article[data-day]")
        if arts:
            target_article = arts[0]

    if not target_article:
        raise Exception(f"–ù–µ –Ω–∞–π–¥–µ–Ω –±–ª–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –¥–∞—Ç—ã {target_dt.strftime('%-d %B')}")

    # 5) –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è –¥–∞—Ç–∞ –≤ —Ä—É—Å—Å–∫–æ–º –≤–∏–¥–µ
    months_ru = [
        "", "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
        "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è",
    ]
    date_str = f"{target_dt.day} {months_ru[target_dt.month]}".capitalize()

    # 6) –†–∞–∑–±–æ—Ä —É—Ç—Ä–æ/–¥–µ–Ω—å/–≤–µ—á–µ—Ä
    mapping = {"m": "morning", "d": "day", "e": "evening"}
    RU_PARTS = {'morning': '–£—Ç—Ä–æ–º', 'day': '–î–Ω—ë–º', 'evening': '–í–µ—á–µ—Ä–æ–º'}
    ICONS = {'morning': 'üåÖ', 'day': 'üèôÔ∏è ', 'evening': 'üåô'}

    result = []
    for prefix, key in mapping.items():
        part = target_article.select_one(f'[style="grid-area:{prefix}-part"]')
        temp = target_article.select_one(f'[style="grid-area:{prefix}-temp"]')
        text = target_article.select_one(f'[style="grid-area:{prefix}-text"]')
        feels = target_article.select_one(f'[style="grid-area:{prefix}-feels"]')
        if not (part and temp and text and feels):
            continue

        emoji = ICONS.get(key, "‚ùì")
        cond_text = text.get_text(" ", strip=True)
        cond = CONDITIONS.get(cond_text.lower(), cond_text)
        result.append(
            f"{emoji} {RU_PARTS[key]}: {temp.get_text(strip=True)} (–ø–æ –æ—â—É—â–µ–Ω–∏—è–º {feels.get_text(strip=True)}), {cond}"
        )

    if not result:
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –±–ª–æ–∫–∏ —É—Ç—Ä–æ/–¥–µ–Ω—å/–≤–µ—á–µ—Ä")

    return f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {date_str} üîÆ:\n\n" + "\n\n".join(result)


def _clean(txt: str) -> str:
    return re.sub(r"\s{2,}", " ", (txt or "").strip())

def fetch_horoscope_yandex_all(day: str = "today") -> str:
    """
    –Ø–Ω–¥–µ–∫—Å / –î–∑–µ–Ω: requests + BeautifulSoup.
    –ë–µ—Ä—ë–º –≤–µ—Ä—Ö–Ω–∏–π –æ–±—â–∏–π –∞–±–∑–∞—Ü + –í–°–ï —Ä–∞–∑–¥–µ–ª—ã (–ñ–µ–Ω—â–∏–Ω—ã/–õ—é–±–æ–≤—å/–§–∏–Ω–∞–Ω—Å—ã‚Ä¶),
    –∏—Å–∫–ª—é—á–∞—è "–î–ª—è –º—É–∂—á–∏–Ω". –ö–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.
    –†–∞–±–æ—Ç–∞–µ—Ç –∏ –¥–ª—è –æ–±—ã—á–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–µ–º—ã, –∏ –¥–ª—è Turbo.
    """
    suf = "na-segodnya" if day == "today" else "na-zavtra"
    urls = [
        "https://dzen.ru/topic/horoscope-skorpion",                         # –æ–±—ã—á–Ω–∞—è —Ç–µ–º–∞
        f"https://dzen.ru/media-turbo/topic/horoscope-skorpion-{suf}",      # turbo-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞
        "https://dzen.ru/media-turbo/topic/horoscope-skorpion",             # –æ–±—â–∏–π turbo
    ]
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                      "AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0 Safari/537.36",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
        "Accept-Language": "ru-RU,ru;q=0.9",
        "Cache-Control": "no-cache",
        "Pragma": "no-cache",
        "Referer": "https://dzen.ru/",
        "Connection": "keep-alive",
    }

    def _clean(s: str) -> str:
        return re.sub(r"\s{2,}", " ", (s or "").replace("\xa0", " ").strip())

    last_err = None
    for url in urls:
        try:
            r = requests.get(url, headers=headers, timeout=15)
            r.raise_for_status()
            html = r.text
            if not html or len(html) < 500:
                last_err = "–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"
                continue

            soup = BeautifulSoup(html, "html.parser")

            # 1) –í–µ—Ä—Ö–Ω–∏–π –æ–±—â–∏–π –∞–±–∑–∞—Ü
            top = ""
            span = soup.select_one(
                'div[class^="topic-channel--horoscope-widget__textBlock-"] '
                'span[class^="topic-channel--rich-text__text-"]'
            )
            if span:
                top = _clean(span.get_text(" ", strip=True))

            # fallback ‚Äî –ø–µ—Ä–≤—ã–π –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π <p>
            if not top:
                for p in soup.select("article p, main p, body p"):
                    t = _clean(p.get_text(" ", strip=True))
                    if t and len(t) > 30:
                        top = t
                        break

            # 2) –†–∞–∑–¥–µ–ª—ã (–∫–∞—Ä—Ç–æ—á–∫–∏)
            sections = []
            container = soup.select_one('div[class^="topic-channel--horoscope-widget__items-"]') or soup
            items = container.select('div[class^="topic-channel--horoscope-widget__item-"]')

            for it in items:
                title_el = it.select_one('div[class^="topic-channel--horoscope-widget__itemTitle-"]')
                text_el = it.select_one('div[class^="topic-channel--horoscope-widget__itemText-"]')

                title = _clean(title_el.get_text(" ", strip=True)) if title_el else ""
                if title.lower().startswith("–¥–ª—è –º—É–∂—á–∏–Ω"):
                    continue  # ‚õîÔ∏è –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ "–î–ª—è –º—É–∂—á–∏–Ω"

                if text_el:
                    body = _clean(text_el.get_text(" ", strip=True))
                else:
                    parts = [
                        _clean(e.get_text(" ", strip=True))
                        for e in it.select("p, li")
                        if _clean(e.get_text(" ", strip=True))
                    ]
                    body = _clean(" ".join(parts))

                if title or body:
                    formatted = f"**{title}**\n{body}" if title else body
                    sections.append(formatted.strip())

            # 3) fallback: –∑–∞–≥–æ–ª–æ–≤–∫–∏ ‚Üí –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
            if not sections:
                root = soup.select_one("article") or soup.select_one("main") or soup
                if root:
                    titles = root.find_all(["h2", "h3", "strong", "span"])
                    i = 0
                    while i < len(titles):
                        t = _clean(titles[i].get_text(" ", strip=True))
                        if not t or t.lower().startswith("–¥–ª—è –º—É–∂—á–∏–Ω"):
                            i += 1
                            continue
                        body_parts = []
                        for sib in titles[i].next_siblings:
                            if getattr(sib, "name", None) in ["h2", "h3", "strong", "span"]:
                                break
                            if getattr(sib, "name", None) in ["p", "li", "div"]:
                                txt = BeautifulSoup(str(sib), "html.parser").get_text(" ", strip=True)
                                if txt:
                                    body_parts.append(txt)
                        body = _clean(" ".join(body_parts))
                        if body:
                            formatted = f"**{t}**\n{body}"
                            sections.append(formatted)
                        i += 1

            # 4) –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            chunks = []
            if top:
                chunks.append(top)
            if sections:
                chunks.append("\n\n".join(sections))

            result = "\n\n".join(chunks).strip()
            result = re.sub(r"\s{3,}", "\n\n", result)

            if result:
                return result

        except Exception as e:
            last_err = e
            continue

    return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üòï (–æ—à–∏–±–∫–∞: {last_err})"




async def send_tomorrow_weather(bot_instance: Bot = None, chat_ids: list[str] = None):
    try:
        forecast = fetch_forecast_from_html(days_ahead=1)
        for chat_id in (chat_ids or USER_CHAT_IDS):
            await (bot_instance or bot).send_message(chat_id=chat_id, text=forecast)
    except Exception as e:
        for chat_id in (chat_ids or USER_CHAT_IDS):
            await (bot_instance or bot).send_message(chat_id=chat_id, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: {e}")

async def send_today_weather(bot_instance: Bot = None, chat_ids: list[str] = None, include_horoscope: bool = False):
    try:
        forecast = fetch_forecast_from_html(days_ahead=0)
        if include_horoscope:
            try:
                horoscope = fetch_horoscope_yandex_all(day="today")
                forecast = f"{forecast}\n\nüîÆ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n{horoscope}"
            except Exception as he:
                forecast = f"{forecast}\n\nüîÆ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ({he})"

        for chat_id in (chat_ids or USER_CHAT_IDS):
            await (bot_instance or bot).send_message(chat_id=chat_id, text=forecast)
    except Exception as e:
        for chat_id in (chat_ids or USER_CHAT_IDS):
            await (bot_instance or bot).send_message(chat_id=chat_id, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {e}")


# ------------------- –ë–û–¢ ------------------- #

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üå§ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞":
        await send_tomorrow_weather(chat_ids=[update.effective_chat.id])
    elif update.message.text == "üåû –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è":
        await send_today_weather(chat_ids=[update.effective_chat.id], include_horoscope=True)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [["üåû –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", "üå§ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"]]
    markup = ReplyKeyboardMarkup(kb, resize_keyboard=True)
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–∫–∞–∂—É —Ç–µ–±–µ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã.", reply_markup=markup)

async def start_bot():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(MessageHandler(filters.TEXT, handle_button))

    loop = asyncio.get_running_loop()
    scheduler = AsyncIOScheduler(timezone=timezone("Europe/Moscow"))

    scheduler.add_job(
        lambda: asyncio.run_coroutine_threadsafe(send_today_weather(app.bot, include_horoscope=True), loop),
        trigger='cron',
        hour=7,
        minute=00
    )
    scheduler.add_job(
        lambda: asyncio.run_coroutine_threadsafe(send_tomorrow_weather(app.bot), loop),
        trigger='cron',
        hour=22,
        minute=30
    )

    scheduler.start()
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await app.run_polling()


if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()

    loop = asyncio.get_event_loop()
    loop.create_task(start_bot())
    loop.run_forever()
