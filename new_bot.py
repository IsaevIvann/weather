import re
import requests
import asyncio
from bs4 import BeautifulSoup
from datetime import datetime, timedelta
from telegram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler

BOT_TOKEN = '7044099465:AAEKAmQZ5B-JFNLZgA5Ze661m6_FzQCpa4Y'
USER_CHAT_ID = '191742166'

bot = Bot(token=BOT_TOKEN)

CONDITIONS = {
    "—è—Å–Ω–æ": "–Ω—É, –≤—Å—ë —è—Å–Ω–æ ",
    "–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ": "—á—É—á—É—Ç–∫–∞ –æ–±–ª–∞—á–Ω–æ üå§",
    "–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏": "—á—É—á—É—Ç–∫–∞ –æ–±–ª–∞—á–Ω–æ üå§",
    "–æ–±–ª–∞—á–Ω–æ": "—Ç–∞–∫ —Å–µ–±–µ, –æ–±–ª–∞—á–Ω–æ ‚òÅÔ∏è",
    "–ø–∞—Å–º—É—Ä–Ω–æ": "–Ω—É —Ç–∞–∫–æ–µ –ø–∞—Å–º—É—Ä–Ω–æ–µ üå•",
    "–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å": "—á—É—Ç—å-—á—É—Ç—å –¥–æ–∂–¥—å üå¶",
    "–¥–æ–∂–¥—å": "–¥–æ—â—å üåß",
    "—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å": "—Ç–æ–≥–æ –≤—Å—ë –∫–∞–∫–æ–π –¥–æ–∂–¥—å üåß",
    "—Å–Ω–µ–≥": "—Å–Ω–µ–≥ ‚ùÑÔ∏è",
    "–≥—Ä–æ–∑–∞": "–≥—Ä–æ–∑–∞ ‚ö°Ô∏è",
}

RU_PARTS = {
    'morning': '–£—Ç—Ä–æ–º',
    'day': '–î–Ω—ë–º',
    'evening': '–í–µ—á–µ—Ä–æ–º',
}

ICONS = {
    'morning': 'üåÖ',
    'day': 'üå§',
    'evening': 'üåá',
}


def fetch_forecast_from_html():
    url = "https://yandex.ru/pogoda/moscow/details"
    headers = {
        "User-Agent": "Mozilla/5.0",
        "Accept-Language": "ru-RU,ru;q=0.9"
    }

    response = requests.get(url, headers=headers, timeout=10)
    soup = BeautifulSoup(response.text, "html.parser")

    article = soup.select_one('article[data-day="2_3"]')
    if not article:
        raise Exception("–ù–µ –Ω–∞–π–¥–µ–Ω –±–ª–æ–∫ <article> —Å data-day='2_3'")

    heading = article.find("h3")
    date_str = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    if heading:
        match = re.search(r"\d{1,2}\s+[–∞-—è—ë]+", heading.text.strip().lower())
        if match:
            date_str = match.group(0).capitalize()

    mapping = {'m': 'morning', 'd': 'day', 'e': 'evening'}
    result = []

    for prefix, key in mapping.items():
        part = article.select_one(f'[style="grid-area:{prefix}-part"]')
        temp = article.select_one(f'[style="grid-area:{prefix}-temp"]')
        text = article.select_one(f'[style="grid-area:{prefix}-text"]')
        feels = article.select_one(f'[style="grid-area:{prefix}-feels"]')
        if not (part and temp and text and feels):
            continue

        emoji = ICONS.get(key, '‚ùì')
        cond = CONDITIONS.get(text.text.strip().lower(), text.text.strip().lower())
        result.append(
            f"{emoji} {RU_PARTS[key]}: {temp.text.strip()} (–ø–æ –æ—â—É—â–µ–Ω–∏—è–º {feels.text.strip()}), {cond}"
        )

    return f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Ç–æ–º–æ—Ä–æ—É  ‚ò∫Ô∏è({date_str}):\n\n" + "\n".join(result)


async def send_tomorrow_weather():
    try:
        forecast = fetch_forecast_from_html()
        await bot.send_message(chat_id=USER_CHAT_ID, text=forecast)
    except Exception as e:
        await bot.send_message(chat_id=USER_CHAT_ID, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: {e}")


async def send_today_weather():
    await bot.send_message(chat_id=USER_CHAT_ID, text="üå§ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")


async def main():
    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_today_weather, trigger='cron', hour=8, minute=45)
    scheduler.add_job(send_tomorrow_weather, trigger='cron', hour=14, minute=26)
    scheduler.start()

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    while True:
        await asyncio.sleep(3600)


if __name__ == "__main__":
    asyncio.run(main())
